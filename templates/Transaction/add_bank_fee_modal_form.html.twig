{%- block add_bank_fee_form -%}
    <style>
        .larger-checkbox {
            transform: scale(1.5);
            margin-right: 10px;
            cursor: pointer;
        }
    </style>

    <input type="hidden" id="transactionBankFeeNotAdded" value="{{ object.bankFeeNotAdded }}">

    <div class="modal-header">
        <div class="row">
            <div class="col-sm-10">
                <span class="modal-title" style="font-size:20px; white-space:initial;">
                    {{ 'add_bank_fee'|trans({}, 'SonataAdminBundle') }} to Transaction No. {{ "%04d"|format(object.transactionNumberString) }}
                </span>
            </div>
            <div class="col-sm-2 text-right">
                <button type="button" class="close" style="font-size:50px; font-weight:500" aria-label="Close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
    </div>

    <div class="modal-body">
        <div class="container-fluid">
            <form id="bankFeeForm" style="text-align: left;" action="{{ admin.generateObjectUrl('addBankFee', object) }}" method="POST">
                <div id="accountContainerAddBankFee" class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            {% if object.invoice %}
                                <label for="mainAccount">{{ 'account_charged'|trans({}, 'SonataAdminBundle') }}:</label>
                                <input type="text" class="form-control" id="account" name="account" value="{{ object.mainAccount.nameWithCurrencyBalance }}" disabled>
                            {% else %}
                                <label for="accountSelect">{{ 'account_charged'|trans({}, 'SonataAdminBundle') }}:</label>
                                <select class="form-control" id="accountSelect" name="accountSelect">
                                    <option selected disabled hidden>{{ 'select_account'|trans({}, 'SonataAdminBundle') }}</option>
                                    {% if object.transactionType.name != 'Funds transfer' %}
                                        <option value="{{ object.transferFromAccount.id }}">{{ object.transferFromAccount.nameWithCurrencyBalance }}</option>
                                    {% endif %}
                                    <option value="{{ object.transferToAccount.id }}">{{ object.transferToAccount.nameWithCurrencyBalance }}</option>
                                </select>
                            {% endif %}
                        </div>
                    </div>
                </div>
                <div id="addBankFeeDateInputContainer" class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="addBankFeeDate">{{ 'date'|trans({}, 'SonataAdminBundle') }}:</label>
                            <input type="date" class="form-control" id="addBankFeeDate" name="addBankFeeDate">
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="addBankFeeInput">{{ 'enter_value'|trans({}, 'SonataAdminBundle') }}:</label>
                            <input type="text" class="form-control" id="addBankFeeInput" name="addBankFeeInput" placeholder="{{ 'enter_value'|trans({}, 'SonataAdminBundle') }}" data-type="currency" style="text-align: end;">
                        </div>
                    </div>
                </div>
                <div class="row text-center">
                    <div class="col-sm-12">
                        <div class="checkbox">
                            <label style="font-size:medium;">
                                <input id="bankFeeNotAddedCheck" type="checkbox" class="larger-checkbox" name="bankFeeNotAddedCheck">
                                <span style="margin-left:5px;">{{ 'bank_fee_not_applicable'|trans({}, 'SonataAdminBundle') }}</span>
                            </label>
                        </div>
                    </div>
                </div>
                <div class="row text-center">
                    <div class="col-sm-12">
                        <div style="margin-top: 10px;">
                            <input id="submitButton" type="submit" name="submit_button" value="Submit" class="btn btn-primary btn-lg" type="submit">
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            const accountContainer = document.querySelector('#accountContainerAddBankFee');
            const accountSelect = document.querySelector('#accountSelect');
            const addBankFeeDateInputContainer = document.querySelector('#addBankFeeDateInputContainer');
            const bankFeeNotAddedCheck = document.querySelector('#bankFeeNotAddedCheck');
            const transactionBankFeeNotAdded = document.getElementById('transactionBankFeeNotAdded');

            if (transactionBankFeeNotAdded.value) {
                bankFeeNotAddedCheck.checked = true;
                accountContainer.style.display = 'none';
                addBankFeeDateInputContainer.style.display = 'none';
            } else {
                accountContainer.style.display = 'block';
                addBankFeeDateInputContainer.style.display = 'block';
            }

            bankFeeNotAddedCheck.addEventListener('change', () => {
                if (bankFeeNotAddedCheck.checked) {
                    accountContainer.style.display = 'none';
                    addBankFeeDateInputContainer.style.display = 'none';
                } else {
                    accountContainer.style.display = 'block';
                    addBankFeeDateInputContainer.style.display = 'block';
                }
            });
        });

        /* Money value input on-type validation */
        $("input[data-type='currency']").on({
            keyup: function() {
                formatCurrency($(this));
            },
            blur: function() { 
                formatCurrency($(this), "blur");
            }
        });

        /* Formats number 1000000 to 1,234,567 */
        function formatNumber(n) {
            return n.replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",")
        }

        /* Validates decimal side and puts cursor back in right position. */
        function formatCurrency(input, blur) {
            // get input value
            var input_val = input.val();
            
            // don't validate empty input
            if (input_val === "") { return; }
            
            // original length
            var original_len = input_val.length;

            // initial caret position 
            var caret_pos = input.prop("selectionStart");
                
            // check for decimal
            if (input_val.indexOf(".") >= 0) {

                // get position of first decimal
                // this prevents multiple decimals from
                // being entered
                var decimal_pos = input_val.indexOf(".");

                // split number by decimal point
                var left_side = input_val.substring(0, decimal_pos);
                var right_side = input_val.substring(decimal_pos);

                // add commas to left side of number
                left_side = formatNumber(left_side);

                // validate right side
                right_side = formatNumber(right_side);
                
                // On blur make sure 2 numbers after decimal
                if (blur === "blur") {
                    right_side += "00";
                }
                
                // Limit decimal to only 2 digits
                right_side = right_side.substring(0, 2);

                // join number by .
                input_val = left_side + "." + right_side;

            } else {
                // no decimal entered
                // add commas to number
                // remove all non-digits
                input_val = formatNumber(input_val);
                
                // final formatting
                if (blur === "blur") {
                    input_val += ".00";
                }
            }
            
            // send updated string to input
            input.val(input_val);

            // put caret back in the right position
            var updated_len = input_val.length;
            caret_pos = updated_len - original_len + caret_pos;
            input[0].setSelectionRange(caret_pos, caret_pos);
        }
    </script>
{% endblock %}

